generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VectorStore {
  id         String   @id @default(uuid())
  facebookID String   @unique
  storePath  String
  businessId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  business   Business @relation(fields: [businessId], references: [id])

  @@index([facebookID])
}

model Account {
  id          String     @id @default(cuid())
  clerkId     String     @unique
  email       String?    @unique
  username    String?    @unique
  firstName   String?
  lastName    String?
  imageUrl    String?
  phoneNumber String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  businesses  Business[]
}

model Business {
  id                String               @id @default(uuid())
  accountId         String?
  facebookPageId    String               @unique
  pageName          String
  description       String?
  contactInfo       String?
  profilePictureUrl String?
  prefix            String?
  website           String?
  customerGender    String?              @default("male")
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  apiTokenEntry     ApiTokenEntry?
  account           Account?             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  customers         Customer[]
  knowledgeBase     KnowledgeBaseEntry[]
  orders            Order[]
  products          Product[]
  pronunced         Pronunced?
  queryCustomers    QueryCustomers[]
  vectorStore       VectorStore?

  @@index([facebookPageId])
}

model Pronunced {
  id         String   @id @default(uuid())
  male       String
  female     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  businessId String   @unique
  business   Business @relation(fields: [businessId], references: [id])
}

model ApiTokenEntry {
  id                      String   @id @default(uuid())
  businessId              String   @unique
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  openAi                  String?
  fb_page_access_token    String?
  fb_verification_token   String?
  graph_page_access_token String?
  eden_ai_api_token       String?
  imgbb_token             String?
  Nyckel_function_id      String?
  business                Business @relation(fields: [businessId], references: [id])

  @@index([businessId])
}

model KnowledgeBaseEntry {
  id         String   @id @default(uuid())
  title      String
  keywords   String[] @default([])
  content    String
  examples   String
  rules      String
  businessId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  business   Business @relation(fields: [businessId], references: [id])

  @@unique([businessId, title])
  @@index([businessId])
}

model City {
  id      Int    @id @default(autoincrement())
  name    String
  name_bn String
  zoneID  Int
  zones   Zone[]
}

model Zone {
  id      Int    @id @default(autoincrement())
  name    String
  name_bn String
  cityId  Int
  city    City   @relation(fields: [cityId], references: [id])
}

model Product {
  id                  String             @id @default(uuid())
  name                String
  productIdentityCode String             @unique
  description         String?
  shortDescription    String?
  price               Decimal            @db.Decimal(10, 2)
  discount            Decimal            @db.Decimal(10, 2)
  availability        Boolean            @default(true)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  productState        String?            @default("in-Stock")
  deliveryTime        String?
  businessId          String
  hasWarranty         Boolean            @default(false)
  warrantyTime        String?
  orderItems          OrderItem[]
  business            Business           @relation(fields: [businessId], references: [id], onDelete: Cascade)
  images              ProductImage[]
  variants            ProductVariant[]
  realImages          RealProductImage[]

  @@index([businessId])
}

model ProductImage {
  id         String  @id @default(uuid())
  imageName  String
  imageLink  String
  productId  String
  deleteHash String?
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model RealProductImage {
  id         String  @id @default(uuid())
  imageName  String
  imageLink  String
  productId  String
  deleteHash String?
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id          String  @id @default(uuid())
  name        String
  isAvailable Boolean
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Customer {
  id          String   @id @default(uuid())
  facebookID  String   @unique
  name        String?
  phoneNumber String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  orders      Order[]
}

model Order {
  id             String      @id @default(uuid())
  customerId     String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  businessId     String
  deliveryStatus String?
  business       Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer       Customer    @relation(fields: [customerId], references: [id])
  items          OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  quantity  Int?
  productId String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model QueryCustomers {
  id            String           @id @default(uuid())
  facebookID    String
  queryProducts String[]
  businessId    String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  messages      MessageHistory[]
  business      Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model MessageHistory {
  id              String         @id @default(uuid())
  role            String
  content         String
  queryCustomerId String
  createdAt       DateTime       @default(now())
  queryCustomer   QueryCustomers @relation(fields: [queryCustomerId], references: [id])
}
